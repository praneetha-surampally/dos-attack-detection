# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDbI2XhGrct9IPeaFi24CutIxYDG0kjN
"""

# Step 1: Install libraries
!pip install streamlit pyngrok -q

# Step 2: Import tools
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
from pyngrok import ngrok
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import io
import base64

# Step 3: DoS detection function
def run_dos_detection():
    url = 'https://raw.githubusercontent.com/DrakenWan/DDOS_Detection/master/SDN%20Dataset/dataset_sdn.csv'
    data = pd.read_csv(url)
    data_size = data.shape
    missing_data = data.isna().sum()
    label_counts = data["label"].value_counts()
    dos_rows = data[data['label'] == 1].tail(10)
    data = data.dropna()
    cleaned_size = data.shape
    data = pd.concat([data, pd.get_dummies(data["Protocol"], prefix="Protocol")], axis=1)
    dos_ips = data[data['label'] == 1]['src'].unique()[:5]
    columns = [i for i in data.columns if data[i].dtype != 'O' and i not in ['src', 'dst']]
    features_used = columns
    data = data[columns]
    label = data["label"]
    data = data.drop(["label"], axis=1)
    corr_matrix = data.corr()
    high_corr = corr_matrix[(corr_matrix > 0.60) == True]
    data = data.loc[:, data.nunique() > 1]
    scaler = StandardScaler().fit(data)
    data_scaled = scaler.transform(data)
    train_X, test_X, train_y, test_y = train_test_split(data_scaled, label, test_size=0.2, random_state=42)
    models = {
        "Logistic Regression": LogisticRegression(),
        "SGD Classifier": SGDClassifier(),
        "Decision Tree": DecisionTreeClassifier(),
        "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5)
    }
    results = {}
    scores = []
    for name, model in models.items():
        model.fit(train_X, train_y)
        pred_y = model.predict(test_X)
        score = accuracy_score(test_y, pred_y) * 100
        scores.append(score)
        results[name] = {
            "accuracy": score,
            "confusion_matrix": confusion_matrix(test_y, pred_y),
            "report": classification_report(test_y, pred_y, output_dict=True)
        }
    best_model = list(models.keys())[scores.index(max(scores))]
    best_accuracy = max(scores)
    fig, ax = plt.subplots()
    ax.bar(models.keys(), scores)
    ax.set_xlabel('Models')
    ax.set_ylabel('Accuracy (%)')
    ax.set_title('DoS Detection: ICMP Flood Accuracy')
    plt.xticks(rotation=45)
    plt.tight_layout()
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    img_str = base64.b64encode(buf.getvalue()).decode()
    return (results, best_model, best_accuracy, img_str, data_size, missing_data,
            label_counts, dos_rows, cleaned_size, features_used, high_corr, dos_ips)

# Step 4: Login page function
def login_page():
    st.title("Login to DoS Detection App")

    # Project Info
    st.write("### About This Project")
    st.write("This project detects ICMP flood Denial-of-Service (DoS) attacks using machine learning. It analyzes network traffic with four models (Logistic Regression, SGD Classifier, Decision Tree, KNN) and displays results like DoS IPs, correlations, and model accuracy in an interactive web app.")

    # Initialize users dictionary if not in session state
    if 'users' not in st.session_state:
        st.session_state['users'] = {
            "admin": "password123",
            "student": "dosdetect2025",
            "guide": "projectguide"
        }

    # Login
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username in st.session_state['users'] and st.session_state['users'][username] == password:
            st.session_state['logged_in'] = True
            st.success("Logged in successfully!")
            st.rerun()
        else:
            st.error("Incorrect username or password.")
            st.write("Not registered? [Register here](#register)")

    # Registration (shown if login fails or via link)
    if 'show_register' not in st.session_state:
        st.session_state['show_register'] = False
    if st.session_state['show_register'] or st.button("Register", key="register_link"):
        st.session_state['show_register'] = True
        st.subheader("Register New User")
        new_username = st.text_input("New Username", key="new_username")
        new_password = st.text_input("New Password", type="password", key="new_password")
        if st.button("Submit Registration"):
            if new_username and new_password and new_username not in st.session_state['users']:
                st.session_state['users'][new_username] = new_password
                st.success(f"Registered {new_username}! You can now log in.")
                st.session_state['show_register'] = False
                st.rerun()
            else:
                st.error("Username already exists or fields are empty.")

# Step 5: Main app function
def main_app():
    st.title("DoS Detection: ICMP Flood")
    st.write("Click to detect ICMP flood DoS attacks using machine learning.")

    if st.button("Run Detection"):
        with st.spinner("Running models..."):
            (results, best_model, best_accuracy, img_str, data_size, missing_data,
             label_counts, dos_rows, cleaned_size, features_used, high_corr, dos_ips) = run_dos_detection()

            st.subheader("Dataset Information")
            st.write("**Data Size**:")
            st.write(data_size)
            st.write("**Missing Data**:")
            st.write(missing_data)
            st.write("**DoS vs Normal Counts**:")
            st.write(label_counts)
            st.write("**Size After Cleaning**:")
            st.write(cleaned_size)

            st.subheader("DoS Attacks")
            st.write("**Last 10 DoS Attacks**:")
            st.write(dos_rows)
            st.write("**Top Source IPs for DoS**:")
            st.write(dos_ips)

            st.subheader("Features Used")
            st.write(features_used)

            st.subheader("Feature Correlations (>0.60)")
            st.write(high_corr)

            st.subheader("Best Model")
            st.success(f"Best Model: {best_model} with {best_accuracy:.2f}% accuracy")

            st.subheader("Model Accuracy Comparison")
            st.image(f"data:image/png;base64,{img_str}")

            st.subheader("Detailed Model Results")
            for name, result in results.items():
                with st.expander(name):
                    st.write(f"**Accuracy**: {result['accuracy']:.2f}%")
                    st.write("**Confusion Matrix**:")
                    st.write(result['confusion_matrix'])
                    st.write("**Classification Report**:")
                    st.json(result['report'])

    if st.button("Logout"):
        st.session_state['logged_in'] = False
        st.rerun()

# Step 6: Streamlit app logic
if 'logged_in' not in st.session_state:
    st.session_state['logged_in'] = False

if st.session_state['logged_in']:
    main_app()
else:
    login_page()

# Step 7: Save Streamlit app
with open("app.py", "w") as f:
    f.write("""
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import io
import base64

def run_dos_detection():
    url = 'https://raw.githubusercontent.com/DrakenWan/DDOS_Detection/master/SDN%20Dataset/dataset_sdn.csv'
    data = pd.read_csv(url)
    data_size = data.shape
    missing_data = data.isna().sum()
    label_counts = data["label"].value_counts()
    dos_rows = data[data['label'] == 1].tail(10)
    data = data.dropna()
    cleaned_size = data.shape
    data = pd.concat([data, pd.get_dummies(data["Protocol"], prefix="Protocol")], axis=1)
    dos_ips = data[data['label'] == 1]['src'].unique()[:5]
    columns = [i for i in data.columns if data[i].dtype != 'O' and i not in ['src', 'dst']]
    features_used = columns
    data = data[columns]
    label = data["label"]
    data = data.drop(["label"], axis=1)
    corr_matrix = data.corr()
    high_corr = corr_matrix[(corr_matrix > 0.60) == True]
    data = data.loc[:, data.nunique() > 1]
    scaler = StandardScaler().fit(data)
    data_scaled = scaler.transform(data)
    train_X, test_X, train_y, test_y = train_test_split(data_scaled, label, test_size=0.2, random_state=42)
    models = {
        "Logistic Regression": LogisticRegression(),
        "SGD Classifier": SGDClassifier(),
        "Decision Tree": DecisionTreeClassifier(),
        "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5)
    }
    results = {}
    scores = []
    for name, model in models.items():
        model.fit(train_X, train_y)
        pred_y = model.predict(test_X)
        score = accuracy_score(test_y, pred_y) * 100
        scores.append(score)
        results[name] = {
            "accuracy": score,
            "confusion_matrix": confusion_matrix(test_y, pred_y),
            "report": classification_report(test_y, pred_y, output_dict=True)
        }
    best_model = list(models.keys())[scores.index(max(scores))]
    best_accuracy = max(scores)
    fig, ax = plt.subplots()
    ax.bar(models.keys(), scores)
    ax.set_xlabel('Models')
    ax.set_ylabel('Accuracy (%)')
    ax.set_title('DoS Detection: ICMP Flood Accuracy')
    plt.xticks(rotation=45)
    plt.tight_layout()
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    img_str = base64.b64encode(buf.getvalue()).decode()
    return (results, best_model, best_accuracy, img_str, data_size, missing_data,
            label_counts, dos_rows, cleaned_size, features_used, high_corr, dos_ips)

def login_page():
    st.title("Login to DoS Detection :")

    # Project Info
    st.write("### About This Project")
    st.write("This project detects ICMP flood Denial-of-Service (DoS) attacks using machine learning. It analyzes network traffic with four models (Logistic Regression, SGD Classifier, Decision Tree, KNN) and displays results like DoS IPs, correlations, and model accuracy")

    # Initialize users dictionary if not in session state
    if 'users' not in st.session_state:
        st.session_state['users'] = {
            "admin": "password123",
            "student": "dosdetect2025",
            "guide": "projectguide"
        }

    # Login
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username in st.session_state['users'] and st.session_state['users'][username] == password:
            st.session_state['logged_in'] = True
            st.success("Logged in successfully!")
            st.rerun()
        else:
            st.error("Incorrect username or password.")
            st.write("Not registered? [Register here](#register)")

    # Registration (shown if login fails or via link)
    if 'show_register' not in st.session_state:
        st.session_state['show_register'] = False
    if st.session_state['show_register'] or st.button("Register", key="register_link"):
        st.session_state['show_register'] = True
        st.subheader("Register New User")
        new_username = st.text_input("New Username", key="new_username")
        new_password = st.text_input("New Password", type="password", key="new_password")
        if st.button("Submit Registration"):
            if new_username and new_password and new_username not in st.session_state['users']:
                st.session_state['users'][new_username] = new_password
                st.success(f"Registered {new_username}! You can now log in.")
                st.session_state['show_register'] = False
                st.rerun()
            else:
                st.error("Username already exists or fields are empty.")

def main_app():
    st.title("DoS Detection: ICMP Flood")
    st.write("Click to detect ICMP flood DoS attacks using machine learning.")
    if st.button("Run Detection"):
        with st.spinner("Running models..."):
            (results, best_model, best_accuracy, img_str, data_size, missing_data,
             label_counts, dos_rows, cleaned_size, features_used, high_corr, dos_ips) = run_dos_detection()
            st.subheader("Dataset Information")
            st.write("**Data Size**:")
            st.write(data_size)
            st.write("**Missing Data**:")
            st.write(missing_data)
            st.write("**DoS vs Normal Counts**:")
            st.write(label_counts)
            st.write("**Size After Cleaning**:")
            st.write(cleaned_size)
            st.subheader("DoS Attacks")
            st.write("**Last 10 DoS Attacks**:")
            st.write(dos_rows)
            st.write("**Top Source IPs for DoS**:")
            st.write(dos_ips)
            st.subheader("Features Used")
            st.write(features_used)
            st.subheader("Feature Correlations (>0.60)")
            st.write(high_corr)
            st.subheader("Best Model")
            st.success(f"Best Model: {best_model} with {best_accuracy:.2f}% accuracy")
            st.subheader("Model Accuracy Comparison")
            st.image(f"data:image/png;base64,{img_str}")
            st.subheader("Detailed Model Results")
            for name, result in results.items():
                with st.expander(name):
                    st.write(f"**Accuracy**: {result['accuracy']:.2f}%")
                    st.write("**Confusion Matrix**:")
                    st.write(result['confusion_matrix'])
                    st.write("**Classification Report**:")
                    st.json(result['report'])
    if st.button("Logout"):
        st.session_state['logged_in'] = False
        st.rerun()

if 'logged_in' not in st.session_state:
    st.session_state['logged_in'] = False

if st.session_state['logged_in']:
    main_app()
else:
    login_page()
""")
# Step 8: Run Streamlit with ngrok
!ngrok authtoken 2w0JnOUhFWK1JsByYu2LOY52v0y_2gzcWxbDttR64qbG9H1qT  # REPLACE WITH YOUR VALID TOKEN
public_url = ngrok.connect(8501)
print(f"Access your DoS detection app at: {public_url}")
!streamlit run app.py --server.port 8501